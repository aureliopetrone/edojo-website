import { NextRequest, NextResponse } from 'next/server';
import { createPost, createSafeSlug, type CreatePostData } from '~/lib/sanity-writer';

// Semplice API key per autenticazione (in produzione usa qualcosa di pi√π sicuro)
const API_KEY = process.env.BLOG_API_KEY || 'edojo-blog-api-key-2024';

// Funzione helper per verificare l'autenticazione
function verifyAuth(request: NextRequest): boolean {
  const authHeader = request.headers.get('authorization');
  const apiKey = request.headers.get('x-api-key');
  
  // Supporta sia Bearer token che X-API-Key header
  if (authHeader && authHeader.startsWith('Bearer ')) {
    return authHeader.substring(7) === API_KEY;
  }
  
  if (apiKey) {
    return apiKey === API_KEY;
  }
  
  return false;
}

// POST - Pubblica automaticamente un articolo
export async function POST(request: NextRequest) {
  try {
    console.log('\nüöÄ API: Auto-publishing blog post...');
    
    // Verifica autenticazione
    if (!verifyAuth(request)) {
      console.warn('‚ö†Ô∏è  Unauthorized access attempt');
      return NextResponse.json(
        {
          success: false,
          error: 'Non autorizzato. Fornire una API key valida.'
        },
        { status: 401 }
      );
    }

    // Verifica il Content-Type
    const contentType = request.headers.get('content-type');
    if (!contentType?.includes('application/json')) {
      return NextResponse.json(
        {
          success: false,
          error: 'Content-Type deve essere application/json'
        },
        { status: 400 }
      );
    }

    // Parse del body
    const body = await request.json();
    console.log('üìä Auto-publish request:', {
      title: body.title,
      hasContent: !!body.content,
      source: body.source || 'unknown',
      categories: body.categories
    });

    // Validazione dei campi obbligatori
    if (!body.title) {
      return NextResponse.json(
        {
          success: false,
          error: 'Il titolo √® obbligatorio'
        },
        { status: 400 }
      );
    }

    if (!body.content) {
      return NextResponse.json(
        {
          success: false,
          error: 'Il contenuto √® obbligatorio'
        },
        { status: 400 }
      );
    }

    // Genera automaticamente slug dal titolo se non fornito
    const slug = body.slug || createSafeSlug(body.title);
    
    // Aggiungi timestamp se non specificato
    const publishedAt = body.publishedAt || new Date().toISOString();
    
    // Prepara i dati del post con defaults intelligenti
    const postData: CreatePostData = {
      title: body.title,
      slug,
      excerpt: body.excerpt || body.content.substring(0, 150) + '...',
      content: body.content,
      author: body.author || {
        name: 'eDojo Team',
        email: 'aurelio.petrone@gmail.com'
      },
      categories: body.categories || ['Generale'],
      featured: body.featured || false,
      publishedAt,
      mainImage: body.mainImage
    };

    console.log('üöÄ Auto-publishing post:', {
      title: postData.title,
      slug: postData.slug,
      author: postData.author?.name,
      categories: postData.categories,
      source: body.source
    });

    // Crea il post
    const result = await createPost(postData);

    if (!result.success) {
      console.error('‚ùå Auto-publish failed:', result.error);
      return NextResponse.json(
        {
          success: false,
          error: result.error,
          message: result.message
        },
        { status: 400 }
      );
    }

    console.log('‚úÖ Auto-publish successful!');

    // Risposta ottimizzata per automazione
    return NextResponse.json({
      success: true,
      message: 'Articolo pubblicato automaticamente con successo!',
      post: {
        id: result.post?._id,
        title: result.post?.title,
        slug: result.post?.slug?.current || result.post?.slug,
        publishedAt: publishedAt,
        url: `https://yourdomain.com/blog/${result.post?.slug?.current || result.post?.slug}`,
        createdAt: result.post?._createdAt
      },
      meta: {
        source: body.source || 'api',
        publishedAt: new Date().toISOString(),
        autoGenerated: {
          slug: !body.slug,
          excerpt: !body.excerpt,
          publishedAt: !body.publishedAt
        }
      }
    }, { status: 201 });

  } catch (error) {
    console.error('‚ùå Auto-publish error:', error);
    
    return NextResponse.json(
      {
        success: false,
        error: 'Errore durante la pubblicazione automatica',
        details: error instanceof Error ? error.message : 'Errore sconosciuto'
      },
      { status: 500 }
    );
  }
}

// GET - Info sull'API di pubblicazione automatica
export async function GET(request: NextRequest) {
  // Verifica autenticazione anche per le info
  if (!verifyAuth(request)) {
    return NextResponse.json(
      {
        success: false,
        error: 'Non autorizzato'
      },
      { status: 401 }
    );
  }

  return NextResponse.json({
    success: true,
    info: {
      endpoint: '/api/blog/publish',
      method: 'POST',
      authentication: 'Bearer token o X-API-Key header',
      requiredFields: ['title', 'content'],
      optionalFields: [
        'slug', 'excerpt', 'author', 'categories', 
        'featured', 'publishedAt', 'mainImage', 'source'
      ],
      example: {
        title: 'Il mio nuovo articolo',
        content: 'Contenuto dell\'articolo...',
        excerpt: 'Breve descrizione',
        categories: ['Tecnologia', 'Web Development'],
        featured: false,
        source: 'automation-script'
      }
    },
    version: '1.0.0',
    timestamp: new Date().toISOString()
  });
} 