import { type NextRequest, NextResponse } from 'next/server';
import { blogDb } from '~/lib/blog-db';
import { auth } from '~/server/auth';

// Semplice API key per autenticazione (in produzione usa qualcosa di pi√π sicuro)
const API_KEY = process.env.BLOG_API_KEY ?? 'edojo-blog-api-key-2024';

// Verifica autenticazione tramite API key
function verifyAuth(request: NextRequest): boolean {
  const apiKey = request.headers.get('x-api-key') ?? request.headers.get('authorization');
  return apiKey === API_KEY;
}

// POST - Pubblica automaticamente un articolo
export async function POST(request: NextRequest) {
  try {
    console.log('\nüöÄ API: Auto-publishing blog post...');
    
    // Verifica autenticazione tramite API key o sessione
    const hasApiKey = verifyAuth(request);
    const session = await auth();
    
    if (!hasApiKey && !session?.user?.id) {
      console.warn('‚ö†Ô∏è  Unauthorized access attempt');
      return NextResponse.json(
        {
          success: false,
          error: 'Non autorizzato. Fornire una API key valida o essere autenticati.'
        },
        { status: 401 }
      );
    }

    // Verifica il Content-Type
    const contentType = request.headers.get('content-type');
    if (!contentType?.includes('application/json')) {
      return NextResponse.json(
        {
          success: false,
          error: 'Content-Type deve essere application/json'
        },
        { status: 400 }
      );
    }

    // Parse del body
    const body = await request.json() as Record<string, unknown>;
    console.log('üìä Auto-publish request:', {
      title: body.title,
      hasContent: !!body.content,
      source: body.source ?? 'unknown'
    });

    // Validazione dei campi obbligatori
    if (typeof body.title !== 'string' || !body.title) {
      return NextResponse.json(
        {
          success: false,
          error: 'Il titolo √® obbligatorio'
        },
        { status: 400 }
      );
    }

    if (typeof body.content !== 'string' || !body.content) {
      return NextResponse.json(
        {
          success: false,
          error: 'Il contenuto √® obbligatorio'
        },
        { status: 400 }
      );
    }

    // Usa l'utente dalla sessione o fallback per API key
    const userId = session?.user?.id ?? 'clxwxwxwx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'; // Default user ID for API calls

    console.log('üöÄ Auto-publishing post:', {
      title: body.title,
      slug: body.slug,
      featured: body.featured,
      source: body.source,
      userId
    });

    // Crea il post usando SQLite
    const result = await blogDb.createPost({
      title: body.title,
      content: body.content,
      excerpt: (typeof body.excerpt === 'string' ? body.excerpt : undefined) ?? body.content.substring(0, 150) + '...',
      slug: typeof body.slug === 'string' ? body.slug : undefined,
      featured: typeof body.featured === 'boolean' ? body.featured : false,
      userId
    });

    console.log('‚úÖ Auto-publish successful!');

    // Risposta ottimizzata per automazione
    return NextResponse.json({
      success: true,
      message: 'Articolo pubblicato automaticamente con successo!',
      post: {
        id: result.id.toString(),
        title: result.title,
        slug: result.slug,
        publishedAt: result.publishedAt.toISOString(),
        url: `https://yourdomain.com/blog/${result.slug}`,
        createdAt: result.createdAt.toISOString()
      },
      meta: {
        source: (typeof body.source === 'string' ? body.source : undefined) ?? 'api',
        publishedAt: new Date().toISOString(),
        autoGenerated: {
          slug: typeof body.slug !== 'string',
          excerpt: typeof body.excerpt !== 'string'
        }
      }
    }, { status: 201 });

  } catch (error) {
    console.error('‚ùå Auto-publish error:', error);
    
    return NextResponse.json(
      {
        success: false,
        error: 'Errore durante la pubblicazione automatica',
        details: error instanceof Error ? error.message : 'Errore sconosciuto'
      },
      { status: 500 }
    );
  }
}

// GET - Info sull'API di pubblicazione automatica
export async function GET(request: NextRequest) {
  // Verifica autenticazione anche per le info
  const hasApiKey = verifyAuth(request);
  const session = await auth();
  
  if (!hasApiKey && !session?.user?.id) {
    return NextResponse.json(
      {
        success: false,
        error: 'Non autorizzato'
      },
      { status: 401 }
    );
  }

  return NextResponse.json({
    success: true,
    info: {
      endpoint: '/api/blog/publish',
      method: 'POST',
      authentication: 'Bearer token, X-API-Key header, o sessione utente',
      requiredFields: ['title', 'content'],
      optionalFields: [
        'slug', 'excerpt', 'featured', 'source'
      ],
      example: {
        title: 'Il mio nuovo articolo',
        content: 'Contenuto dell\'articolo...',
        excerpt: 'Breve descrizione',
        featured: false,
        source: 'automation-script'
      }
    },
    version: '2.0.0',
    database: 'SQLite'
  });
} 